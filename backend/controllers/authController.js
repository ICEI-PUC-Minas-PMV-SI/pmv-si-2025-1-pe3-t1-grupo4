const User = require('../models/User'); // Importa o modelo User
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

exports.register = async (req, res) => {
  const { nome, email, senha } = req.body;

  try {
    const existe = await User.findOne({ email });
    if (existe) return res.status(400).json({ msg: "Email j√° cadastrado" });

    const salt = await bcrypt.genSalt(10);
    const senhaHash = await bcrypt.hash(senha, salt);

    const novoUsuario = new User({ nome, email, senha: senhaHash });

    await novoUsuario.save();

    res.status(201).json({ msg: "Usu√°rio criado com sucesso" });
  } catch (err) {
    console.error("Erro no register:", err);
    res.status(500).json({ msg: "Erro no servidor" });
  }
};

exports.login = async (req, res) => {
  const { email, senha } = req.body;

  try {
    const usuario = await User.findOne({ email });
    if (!usuario) return res.status(404).json({ msg: "Usu√°rio n√£o encontrado" });

console.log("üì• Email recebido:", email);
console.log("üì• Senha digitada:", senha);
console.log("üîê Hash no banco:", usuario.senha);

const senhaValida = await bcrypt.compare(senha, usuario.senha);
console.log("‚úÖ A senha √© v√°lida?", senhaValida);

if (!senhaValida) {
  console.log("‚ùå Senha incorreta!");
  return res.status(401).json({ msg: "Senha incorreta" });
}

    // Gera token JWT com tempo de expira√ß√£o
    const token = jwt.sign(
      { id: usuario._id, tipo: usuario.tipo },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // Retorna o token e os dados do usu√°rio (sem a senha)
    res.json({
      token,
      usuario: {
        nome: usuario.nome,
        email: usuario.email,
        tipo: usuario.tipo
      }
    });
  } catch (err) {
    console.error("Erro no login:", err);
    res.status(500).json({ msg: "Erro no login" });
  }
};

exports.recuperarSenha = async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ msg: 'Informe o email para recupera√ß√£o.' });
  }

  try {
    const usuario = await User.findOne({ email });

    if (!usuario) {
      return res.status(404).json({ msg: 'Email n√£o encontrado.' });
    }

    // Aqui voc√™ pode implementar a l√≥gica para enviar o email com a recupera√ß√£o da senha
    // Por enquanto, vamos s√≥ retornar uma mensagem para teste
    res.json({ msg: "Enviamos as instru√ß√µes de recupera√ß√£o para o seu e-mail!" });


  } catch (err) {
    console.error('Erro na recupera√ß√£o de senha:', err);
    res.status(500).json({ msg: 'Erro no servidor' });
  }
};